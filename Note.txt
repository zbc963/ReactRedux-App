Section 1:
npm install -g(install it globally) create-react-app(package name)
1.Babel: is a dependency able to parse any version of javascript(eg:js2018,js2015) into ES5 js file.
2. const React = require('react') is CommonJS Modules import statement
   import is ES2015 Import statement


Section 2: Building Content with JSX
1.we usually use JSX in es2015 function call
 JSX format is allowed us to write code in HTML instead of the function calls such as '<div>' = 'React.createElement("div", null, React.creatElement()....)'
2. Browser dont understand JSX code, we wrote JSX then run tools to turn it into normal JS
3. Difference between HTML and JSX : 
a. different way to add the styling 
(eg:HTML = <button style = "background-color:blue;color:white;"> Submit </button>
JSX =  <button style ={{color:'white',background:'blue'}}> Submit </button>)
b. class in JSX is className vs class in HTML in order to avoid class{} in js
c. JSX can easily reference JS variables
JS is not able to show the content like the attribute such as buttonText = {text: 'Click Me'} then {buttonText}, instead we could just show one of the attribute such as buttonText.text

Section3: Communicating with Props
1. Component Nesting: can be shown inside of another component
2. Reusable
3. configuration
4. Props(properties): stage 1: System for passing data from a parent component to a child component
		      stage 2: Goal is to customize or configure a child component


Section4: Structuring Apps with Class-Based Components
1.Geolocation to get the current location

Section 5:
App lifecycle walking through:
1. JS file is loaded into browser
2. Instance of App component is created
3. App components 'constructor' fucntion get called
4. State object is created and assigned to the 'this.state' property
5. We call geolocation service
6. React calls the components render method
7. Position callback function get return value, the props is reset by setState()
8. React calls the render method second time

Section 6:
Component Lifecycle:
1. contructor
2. render => content will be visible on the screen
3. componentDidMount(this method will be instantly called one time when our component is first get rendered on the screen ) 
4. sit and wait for updates.. => componentDidUpdate
5. sit and wait until this component is not longer shown => componentWillUnmount(good place to do cleanup(especially non-React stuff))

Why Lifecycle Method:
make your code more clear, and to see the lifecycle of the components will be rendered in different time point
Other rare lifecycle:
1. shouldComponentUpdate
2. getDerivedStateFromProps
3. getSnapshotBeforeUpdate

Section 7: Hnadling User Input with Forms and Events
1. Users clicks on something=>onClick
2. User changes text in an input => onChange
3. User submits a form => onSubmit

React devleoper prefer Controlled element
Controlled(keep all the value is known in the React framework) vs unControlled(all the information is stored outside the React framework. eg.in the html DOM)
flow:
1. user types in input
2. Callback gets invoked
3. we call setState with the new value
4. Component renders
5. Input is told what its value is
Controlled element will be better to be organized in the React, cuz at anytime point we have value instantly instead of finding the value through the html DOM

<form> with <input> inside when use press 'Enter' key, the browser will be defualt regard it as submit

this.bind and ()=> is able to solve the undefined elements called in the function

Section 8: Making API requests with React
React is only to handle the html and the user interaction within the html
Axios is in order to handle the ajax request and 
Fetch is a single function built into modern browsers
axios.get('path',{param:{query:term}, Headers:{Authorization: ' '}) return a object called promise
map() is an function that built into the array object in the JS 


Section 9 : Handling List in React
array.map((arguments)=>{return <html tag attribute={arguments.id}/>})

Section 10:  Using Ref'S for DOM access
1. Grid CSS system
grid-template-columns: repeat(auto-fill,minmax(250px,1fr))  
'1fr' here means each max in each column will take the 1 frame that is greater than 250 px;
2. props.images.map(({description,id,urls})=>{....}) description,id and urls will directly inherint the related properties of the array
3. const {description,id,urls} = this.props.image; another way to assign the property to each variables and it's reuseable
4. we do not directly use document.querySelector('') to select the component in the DOM tree. Instead, we use React Refs




